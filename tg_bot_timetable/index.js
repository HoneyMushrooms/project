import TelegramBot from "node-telegram-bot-api";
import dotenv from 'dotenv';
import db from './db.js';
import TimeTable from "./utils/timeTable.js";
import WorkDate from "./utils/workDate.js";

dotenv.config();

const bot = new TelegramBot(process.env.TOKEN, { polling: true });
const users = new Map();

bot.onText(/\/start$/, async (msg) => {

	// –¥–∞, —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å –≤—ã–Ω–µ—Å—Ç–∏ –±—ã –æ—Ç—Å—é–¥–∞ –ø–æ—Ö–æ—Ä–æ—à–µ–º—É, –Ω—É –ª–∞–¥–Ω–æ
	const groupsData = await db.query('SELECT group_name as gn FROM public.group');
	const groups = groupsData.rows.map( group => ({ text: group.gn, callback_data: group.gn })).reduce((acc, cur, i) => {
		const groupIndex = Math.floor(i / 4);
		if (!acc[groupIndex]) {
		  acc[groupIndex] = [];
		}
		acc[groupIndex].push(cur); 
		return acc;
	}, []);

	const startText = `–î–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–µ–¥–ª–∞–≥–∞—é –≤–∞–º –≤—ã–±—Ä–∞—Ç—å –Ω–∞—Ü–∏—é, (—è –≤—ã–±—Ä–∞–ª <i>–†–ò–ú–õ–Ø–ù</i>, —É –Ω–∏—Ö –±–æ–Ω—É—Å –∫ —Å–±–æ—Ä—É —Ä–µ—Å—É—Ä—Å–æ–≤ –∏ –±–æ–Ω—É—Å –∫ –∞—Ç–∞–∫–µ ü¶ç)`

	bot.sendMessage(msg.chat.id, startText, {
		parse_mode: 'HTML',
		reply_markup: {
			inline_keyboard: [
				...groups
			]
		}
	})
})

bot.on('callback_query', (msg) => {
	const { id } = msg.from;

	users.set(id, msg.data);
	
	return bot.sendPhoto(id, './public/ladno.jpg', {
		caption: '—Ç–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å —Å–º–æ—Ç—Ä–µ—Ç—å —á–µ—Ç–∫–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç –ú–∞–∫—Å–æ–Ω—á–∏–∫–∞, –Ω–µ –∑–∞–±—É–¥—å —Å—Ç—Ä–µ–ª—å–Ω—É—Ç—å —É –Ω–µ–≥–æ —Å–∏–∂–∫—É –ø—Ä–∏ –≤—Å—Ç—Ä–µ—á–µ',
		reply_markup: {
			keyboard: [
				['üìó –°–µ–≥–æ–¥–Ω—è', 'üìò –ó–∞–≤—Ç—Ä–∞', 'üìö –ù–µ–¥–µ–ª—è'],
				['üóø –°–ª–µ–¥—É—â–∞—è –Ω–µ–¥–µ–ª—è'],
			],
			resize_keyboard: true
		}
	});
})

bot.on('message', async (msg) => {
	console.log('msg :>> ', msg);
	const { id } = msg.from;
	const group = users.get(id);
	
	switch (msg.text) {
		case 'üìó –°–µ–≥–æ–¥–Ω—è': {
			const date = WorkDate.formattedDate(new Date());
			
			if(WorkDate.checkFreeDay(date)) {
				bot.sendVideo(id, './public/gachi.mp4', {
					caption: '–¥—Ä—É–∂–µ, —Å–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥–Ω–æ–π üçª',
					width: 640,
					height: 480
				})
			} else {
				const timeTable = await TimeTable.day(date, group);
				bot.sendMessage(id, '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ' + timeTable);
			}
			break;
		}
		case 'üìò –ó–∞–≤—Ç—Ä–∞': {
			const date = WorkDate.formattedDate(new Date((msg.date + 86400) * 1000));

			if(WorkDate.checkFreeDay(date)) {
				bot.sendVideo(id, './gachi.mp4', {
					caption: '–¥—Ä—É–∂–µ, –∑–∞–≤—Ç—Ä–∞ –≤—ã—Ö–æ–¥–Ω–æ–π üçª',
					width: 640,
					height: 480
				})
			} else {
				const timeTable = await TimeTable.day(date, group);
				bot.sendMessage(id, '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ ' + timeTable);
			}
			break;
		}
		case 'üìö –ù–µ–¥–µ–ª—è': {
			const dates = WorkDate.getModayAndFriday();
			const timeTable = await TimeTable.week(...dates, group);
			bot.sendMessage(id, '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é ' + timeTable);
			break;
		}
		case 'üóø –°–ª–µ–¥—É—â–∞—è –Ω–µ–¥–µ–ª—è': {
			const dates = WorkDate.getModayAndFriday(new Date((msg.date + 86400 * 7) * 1000));
			const timeTable = await TimeTable.week(...dates, group);
			bot.sendMessage(id, '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—â—É—é –Ω–µ–¥–µ–ª—é ' + timeTable);
			break;
		}
	}
})
