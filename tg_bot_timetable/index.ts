import TelegramBot, { KeyboardButton, Message } from "node-telegram-bot-api";
import dotenv from 'dotenv';
import db from './db.js';
import TimeTable from "./utils/timeTable.js";
import WorkDate from "./utils/workDate.js";
import { QueryResult } from 'pg';
import { IGroup, IGroupForKeyboard } from "./types/interfaces.js";

dotenv.config();

enum KeyboardButtons {
	Today = 'üìó –°–µ–≥–æ–¥–Ω—è',
	Tomorrow = 'üìò –ó–∞–≤—Ç—Ä–∞',
	Week = 'üìö –ù–µ–¥–µ–ª—è',
	NextWeek = 'üóø –°–ª–µ–¥—É—â–∞—è –Ω–µ–¥–µ–ª—è'
};

let bot: TelegramBot;
const users = new Map<number, string>();

if(process.env.TOKEN) {
	bot = new TelegramBot(process.env.TOKEN, { polling: true });

	bot.onText(/\/start$/, async (msg) => {
		const groupsData: QueryResult<IGroup> = await db.query('SELECT group_name as name FROM public.group');
		const groups = groupsData.rows
			.map((group): IGroupForKeyboard => ({ text: group.name, callback_data: group.name }))
			.reduce((arr: IGroupForKeyboard[][], group: IGroupForKeyboard, index: number) => {
				const groupIndex = Math.floor(index / 4);
				if (!arr[groupIndex]) {
					arr[groupIndex] = [];
				}
				arr[groupIndex].push(group); 
				return arr;
			}, []);

		const startText = `–î–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–µ–¥–ª–∞–≥–∞—é –≤–∞–º –≤—ã–±—Ä–∞—Ç—å –Ω–∞—Ü–∏—é, (—è –≤—ã–±—Ä–∞–ª <i>–†–ò–ú–õ–Ø–ù</i>, —É –Ω–∏—Ö –±–æ–Ω—É—Å –∫ —Å–±–æ—Ä—É —Ä–µ—Å—É—Ä—Å–æ–≤ –∏ –±–æ–Ω—É—Å –∫ –∞—Ç–∞–∫–µ ü¶ç)`

		bot.sendMessage(msg.chat.id, startText, {
			parse_mode: 'HTML',
			reply_markup: {
				inline_keyboard: [
					...groups
				]
			}
		});
	});

	bot.on('callback_query', (msg) => {
		const { id } = msg.from;

		if(msg.data) {
			users.set(id, msg.data);
			
			return bot.sendPhoto(id, './public/ladno.jpg', {
				caption: '—Ç–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å —Å–º–æ—Ç—Ä–µ—Ç—å —á–µ—Ç–∫–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç –ú–∞–∫—Å–æ–Ω—á–∏–∫–∞, –Ω–µ –∑–∞–±—É–¥—å —Å—Ç—Ä–µ–ª—å–Ω—É—Ç—å —É –Ω–µ–≥–æ —Å–∏–∂–∫—É –ø—Ä–∏ –≤—Å—Ç—Ä–µ—á–µ',
				reply_markup: {
					keyboard: [
						[KeyboardButtons.Today, KeyboardButtons.Tomorrow, KeyboardButtons.Week],
						[KeyboardButtons.NextWeek],
					] as unknown as KeyboardButton[][],
					resize_keyboard: true
				}
			});
		}
	});

	bot.on('text', async (msg) => {

		let id = msg.from?.id;
		
		if(id) {
			const group = users.get(id);
			if(group) {
				switch (msg.text) {
					case KeyboardButtons.Today: {
						const date = WorkDate.formattedDate(new Date());
						
						if(WorkDate.checkFreeDay(date)) {
							bot.sendVideo(id, './public/gachi.mp4', {
								caption: '–¥—Ä—É–∂–µ, —Å–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥–Ω–æ–π üçª',
								width: 640,
								height: 480
							})
						} else {
							const timeTable = await TimeTable.day(date, group);
							bot.sendMessage(id, '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ' + timeTable);
						}
						break;
					}
					case KeyboardButtons.Tomorrow: {
						const date = WorkDate.formattedDate(new Date((msg.date + 86400) * 1000));
		
						if(WorkDate.checkFreeDay(date)) {
							bot.sendVideo(id, './gachi.mp4', {
								caption: '–¥—Ä—É–∂–µ, –∑–∞–≤—Ç—Ä–∞ –≤—ã—Ö–æ–¥–Ω–æ–π üçª',
								width: 640,
								height: 480
							})
						} else {
							const timeTable = await TimeTable.day(date, group);
							bot.sendMessage(id, '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ ' + timeTable);
						}
						break;
					}
					case KeyboardButtons.Week: {
						const dates = WorkDate.getModayAndFriday();
						const timeTable = await TimeTable.week(...dates, group);
						bot.sendMessage(id, '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é ' + timeTable);
						break;
					}
					case KeyboardButtons.NextWeek: {
						const dates = WorkDate.getModayAndFriday(new Date((msg.date + 86400 * 7) * 1000));
						const timeTable = await TimeTable.week(...dates, group);
						bot.sendMessage(id, '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—â—É—é –Ω–µ–¥–µ–ª—é ' + timeTable);
						break;
					}
				}
			}
		}
	});
}
